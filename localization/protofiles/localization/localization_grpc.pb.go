// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: protofiles/localization.proto

package localization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocalizationClient is the client API for Localization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalizationClient interface {
	SendLocation(ctx context.Context, opts ...grpc.CallOption) (Localization_SendLocationClient, error)
	GetNearVehicles(ctx context.Context, in *UserLocationRequest, opts ...grpc.CallOption) (Localization_GetNearVehiclesClient, error)
}

type localizationClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalizationClient(cc grpc.ClientConnInterface) LocalizationClient {
	return &localizationClient{cc}
}

func (c *localizationClient) SendLocation(ctx context.Context, opts ...grpc.CallOption) (Localization_SendLocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Localization_ServiceDesc.Streams[0], "/localization.Localization/SendLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &localizationSendLocationClient{stream}
	return x, nil
}

type Localization_SendLocationClient interface {
	Send(*VehicleLocationRequest) error
	CloseAndRecv() (*AckResponse, error)
	grpc.ClientStream
}

type localizationSendLocationClient struct {
	grpc.ClientStream
}

func (x *localizationSendLocationClient) Send(m *VehicleLocationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localizationSendLocationClient) CloseAndRecv() (*AckResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localizationClient) GetNearVehicles(ctx context.Context, in *UserLocationRequest, opts ...grpc.CallOption) (Localization_GetNearVehiclesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Localization_ServiceDesc.Streams[1], "/localization.Localization/GetNearVehicles", opts...)
	if err != nil {
		return nil, err
	}
	x := &localizationGetNearVehiclesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Localization_GetNearVehiclesClient interface {
	Recv() (*NearVehicleResponse, error)
	grpc.ClientStream
}

type localizationGetNearVehiclesClient struct {
	grpc.ClientStream
}

func (x *localizationGetNearVehiclesClient) Recv() (*NearVehicleResponse, error) {
	m := new(NearVehicleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LocalizationServer is the server API for Localization service.
// All implementations should embed UnimplementedLocalizationServer
// for forward compatibility
type LocalizationServer interface {
	SendLocation(Localization_SendLocationServer) error
	GetNearVehicles(*UserLocationRequest, Localization_GetNearVehiclesServer) error
}

// UnimplementedLocalizationServer should be embedded to have forward compatible implementations.
type UnimplementedLocalizationServer struct {
}

func (UnimplementedLocalizationServer) SendLocation(Localization_SendLocationServer) error {
	return status.Errorf(codes.Unimplemented, "method SendLocation not implemented")
}
func (UnimplementedLocalizationServer) GetNearVehicles(*UserLocationRequest, Localization_GetNearVehiclesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNearVehicles not implemented")
}

// UnsafeLocalizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalizationServer will
// result in compilation errors.
type UnsafeLocalizationServer interface {
	mustEmbedUnimplementedLocalizationServer()
}

func RegisterLocalizationServer(s grpc.ServiceRegistrar, srv LocalizationServer) {
	s.RegisterService(&Localization_ServiceDesc, srv)
}

func _Localization_SendLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalizationServer).SendLocation(&localizationSendLocationServer{stream})
}

type Localization_SendLocationServer interface {
	SendAndClose(*AckResponse) error
	Recv() (*VehicleLocationRequest, error)
	grpc.ServerStream
}

type localizationSendLocationServer struct {
	grpc.ServerStream
}

func (x *localizationSendLocationServer) SendAndClose(m *AckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localizationSendLocationServer) Recv() (*VehicleLocationRequest, error) {
	m := new(VehicleLocationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Localization_GetNearVehicles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserLocationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalizationServer).GetNearVehicles(m, &localizationGetNearVehiclesServer{stream})
}

type Localization_GetNearVehiclesServer interface {
	Send(*NearVehicleResponse) error
	grpc.ServerStream
}

type localizationGetNearVehiclesServer struct {
	grpc.ServerStream
}

func (x *localizationGetNearVehiclesServer) Send(m *NearVehicleResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Localization_ServiceDesc is the grpc.ServiceDesc for Localization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Localization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "localization.Localization",
	HandlerType: (*LocalizationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendLocation",
			Handler:       _Localization_SendLocation_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetNearVehicles",
			Handler:       _Localization_GetNearVehicles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protofiles/localization.proto",
}
